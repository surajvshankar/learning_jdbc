package DAO_challenge;

import DAO_challenge.dao.CustomerDAO;
import DAO_challenge.dao.OrderItemDAO;
import DAO_challenge.dao.PurchaseOrderDAO;
import DAO_challenge.dao.SalesPersonDAO;
import DAO_challenge.model.Customer;
import DAO_challenge.model.OrderItem;
import DAO_challenge.model.PurchaseOrder;
import DAO_challenge.model.SalesPerson;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.Scanner;


public class challenge {
  private static final String db_server = "localhost";
  private static final String db = "orderprocessing";
  private static final String db_username = "postgres";
  private static final String db_password = "password";
  private static final String DROP_DB = String.format("DROP DATABASE %s", db);
  private static final String CREATE_DB = String.format("CREATE DATABASE %s", db);
  //  The name of the sequence is autogenerated and is always tablename_columnname_seq, in your case the sequence will
  // be names names_id_seq.
  private static final String CUSTOMER_TABLE_SEQ = "customer_id_seq";
  private static final String SALESPERSON_TABLE_SEQ = "salesperson_id_seq";
  private static final String ORDER_ITEM_TABLE_SEQ = "orderItem_id_seq";
  private static final String PURCHASE_ORDER_TABLE_SEQ = "purchaseOrder_id_seq";
  private static final String CREATE_CUSTOMER_TABLE = String.format("CREATE SEQUENCE %s start with 10000; "
      + "CREATE TABLE customer (id INTEGER NOT NULL DEFAULT nextval('%s'), name VARCHAR(255), PRIMARY KEY ( id ))",
      CUSTOMER_TABLE_SEQ, CUSTOMER_TABLE_SEQ);
  private static final String CREATE_SALESPERSON_TABLE = String.format("CREATE SEQUENCE %s start with 10000; "
      + "CREATE TABLE salesperson (id INTEGER NOT NULL DEFAULT nextval('%s'), name VARCHAR(255), PRIMARY KEY ( id ))",
      SALESPERSON_TABLE_SEQ, SALESPERSON_TABLE_SEQ);
  private static final String CREATE_ORDERITEM_TABLE = String.format("CREATE SEQUENCE %s start with 10000; "
      + "CREATE TABLE order_item (id INTEGER NOT NULL DEFAULT nextval('%s'), name VARCHAR(255), price FLOAT, "
      + "quantity INTEGER, PRIMARY KEY ( id ))", ORDER_ITEM_TABLE_SEQ, ORDER_ITEM_TABLE_SEQ);
  private static final String CREATE_PURCHASEORDER_TABLE = String.format("CREATE SEQUENCE %s start with 10000; "
      + "CREATE TABLE purchase_order (id INTEGER NOT NULL DEFAULT nextval('%s'), date DATE NOT NULL, "
      + "orderItemIds INTEGER ARRAY, customerId INTEGER NOT NULL, salespersonId INTEGER NOT NULL, total FLOAT, "
      + "PRIMARY KEY ( id ))", PURCHASE_ORDER_TABLE_SEQ, PURCHASE_ORDER_TABLE_SEQ);

  public static void main(String... args) {
    while (true) {
      System.out.println("-1. To quit the program");
      System.out.println("0. To create the DB");
      System.out.println("1. To create a customer");
      System.out.println("2. To create a salesperson");
      System.out.println("3. To create an orderitem");
      System.out.println("4. To create an order");
      System.out.println("5. To get an order");
      System.out.println("6. Get orders for a customer"); // TODO : using JOIN and the using stored-procedures.
      System.out.printf("Enter an operation: ");
      Scanner scanner = new Scanner(System.in);
      int option = scanner.nextInt();

      if (option == -1) {
        System.out.println("Exiting program...");
        break;
      }

      if (option == 0) {
        System.out.println("Creating the DB...");
        createDB();
        continue;
      }

      DatabaseConnectionManager dcm = new DatabaseConnectionManager(db_server, db, db_username, db_password);
      try {
        Connection connection = dcm.getConnection();

        if (option == 1) {
          System.out.println("Creating a customer...");
          createCustomer(connection, 1);
        } else if (option == 2) {
          System.out.println("Creating a sales person...");
          createSalesPerson(connection, 1);
        } else if (option == 3) {
          System.out.println("Creating an Order Item...");
          createOrderItem(connection, "apple", 2.24, 100);
          createOrderItem(connection, "mango", 5.44, 50);
        } else if (option == 4) {
          System.out.println("Creating a Purchase Order...");
          createPurchaseOrder(connection);
        } else if (option == 5) {
          System.out.println("Getting a Purchase Order...");
          getPurchaseOrder(connection);
        }
      } catch(SQLException e){
        e.printStackTrace();
      }
    }
  }

  public static void createDB() {
    try(Connection connection = DriverManager.getConnection(String.format("jdbc:postgresql://%s/", db_server), db_username, db_password);
        Statement stmt = connection.createStatement();){
      ResultSet rs = stmt.executeQuery(String.format("SELECT FROM pg_database WHERE datname = '%s'", db));
      if(rs.next()) {
        stmt.executeUpdate(DROP_DB);
        System.out.printf("DB: %s successfully dropped ...\n", db);
      }
      stmt.executeUpdate(CREATE_DB);
      System.out.printf("DB: %s successfully created ...\n", db);
    } catch (SQLException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
    DatabaseConnectionManager dcm = new DatabaseConnectionManager(db_server, db, db_username, db_password);
    try(Connection connection = dcm.getConnection();
        Statement stmt = connection.createStatement();){
      stmt.executeUpdate(CREATE_CUSTOMER_TABLE);
      System.out.println("Created 'customer' table...");
      stmt.executeUpdate(CREATE_SALESPERSON_TABLE);
      System.out.println("Created 'salesperson' table...");
      stmt.executeUpdate(CREATE_ORDERITEM_TABLE);
      System.out.println("Created 'order_item' table...");
      stmt.executeUpdate(CREATE_PURCHASEORDER_TABLE);
      System.out.println("Created 'purchase_order' table...");
    } catch (SQLException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }

  public static void createCustomer(Connection connection, int customerNo) {
    String customerName = String.format("customer%d", customerNo);
    System.out.printf("Creating %s...\n", customerName);
    CustomerDAO customerDAO = new CustomerDAO(connection);
    Customer customer = new Customer();
    customer.setName(customerName);
    customerDAO.create(customer, CUSTOMER_TABLE_SEQ);
  }

  public static void createSalesPerson(Connection connection, int salespersonNo) {
    String salespersonName = String.format("salesperson%d", salespersonNo);
    System.out.printf("Creating %s...\n", salespersonName);
    SalesPersonDAO salesPersonDAO = new SalesPersonDAO(connection);
    SalesPerson salesPerson = new SalesPerson();
    salesPerson.setName(salespersonName);
    salesPersonDAO.create(salesPerson, SALESPERSON_TABLE_SEQ);
  }

  public static void createOrderItem(Connection connection, String name, double price, long quantity) {
    System.out.printf("Creating orderitem %s...\n", name);
    OrderItemDAO orderItemDAO = new OrderItemDAO(connection);
    OrderItem orderItem = new OrderItem();
    orderItem.setName(name);
    orderItem.setPrice(price);
    orderItem.setQuantity(quantity);
    orderItemDAO.create(orderItem, ORDER_ITEM_TABLE_SEQ);
  }

  public static void createPurchaseOrder(Connection connection) {
    System.out.println("Creating purchase_order ...");
    long customerId = 10000;
    long salespersonId = 10000;
    long[] orderItemIds = { 10000, 10001 };
    PurchaseOrderDAO purchaseOrderDAO = new PurchaseOrderDAO(connection);
    PurchaseOrder purchaseOrder = new PurchaseOrder();
    purchaseOrder.setDate(LocalDate.now());
    for (long orderItemId : orderItemIds) {
      purchaseOrder.setOrderItemId(orderItemId);
    }
    purchaseOrder.setCustomerId(customerId);
    purchaseOrder.setSalespersonId(salespersonId);

    OrderItemDAO orderItemDAO = new OrderItemDAO(connection);
    double total = 0;
    for (long orderItemId : orderItemIds) {
      OrderItem orderItem = orderItemDAO.findById(orderItemId);
      total = total + (orderItem.getPrice() * orderItem.getQuantity());
    }
    purchaseOrder.setTotal(total);

    purchaseOrderDAO.create(purchaseOrder, PURCHASE_ORDER_TABLE_SEQ);
  }

  public static void getPurchaseOrder(Connection connection) {
    PurchaseOrderDAO purchaseOrderDAO = new PurchaseOrderDAO(connection);
    OrderItemDAO orderItemDAO = new OrderItemDAO(connection);
    CustomerDAO customerDAO = new CustomerDAO(connection);
    SalesPersonDAO salesPersonDAO = new SalesPersonDAO(connection);
    PurchaseOrder purchaseOrder = purchaseOrderDAO.findById(10000L);
    Customer customer = customerDAO.findById(purchaseOrder.getCustomerId());
    SalesPerson salesPerson = salesPersonDAO.findById(purchaseOrder.getSalespersonId());
    System.out.printf("Purchase Order: %d Dated: %s Total: $%.2f Customer Name: %s Sales Person's Name: %s\n",
        purchaseOrder.getId(), purchaseOrder.getDate(), purchaseOrder.getTotal(), customer.getName(), salesPerson.getName());
    for ( Long orderItemId : purchaseOrder.getOrderItemIds()) {
      OrderItem o = orderItemDAO.findById(orderItemId);
      System.out.printf("Item: %s Price: $%.2f Nos: %d\n", o.getName(), o.getPrice(), o.getQuantity());
    }
  }
}
